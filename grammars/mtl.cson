name: "Wavefront Material"
scopeName: "source.wavefront.mtl"
fileTypes: ["mtl"]
patterns: [include: "#main"]

repository:
	
	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#newmtl"}
			{include: "#colour"}
			{include: "#texture"}
			{include: "#reflection"}
			{include: "#number"}
		]

	# Comment-lines
	comment:
		name: "comment.line.number-sign.wavefront.mtl"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.wavefront.mtl"


	# Numeric values
	number:
		patterns: [{
			
			# Integer
			name: "constant.numeric.integer.wavefront.mtl"
			match: "(?<=[\\s,]|^)-?\\d+(?![-\\d.])"
			
		},{
			# Floating-point
			name: "constant.numeric.float.wavefront.mtl"
			match: "(?<=[\\s,]|^)-?(\\d+)(?:(\\.)(\\d+))?\\b"
			captures:
				1: name: "leading.decimal"
				2: name: "decimal.separator"
				3: name: "trailing.decimal"
		},{
			# Floating-point: No leading digits
			name: "constant.numeric.float.no-leading-digits.wavefront.mtl"
			match: "(?<=[\\s,]|^)-?(\\.)(\\d+)\\b"
			captures:
				1: name: "decimal.separator"
				2: name: "trailing.decimal"
		}]

	
	# newmtl: Initialise a new material
	newmtl:
		name: "meta.constructor.wavefront.mtl"
		match: "^\\s*(newmtl)(?=\\s|$)(?:\\s+(\\w+))?"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "variable.parameter.material-name.wavefront.mtl"


	# Colour, transparency and illumination statements
	colour:
		patterns: [
			{include: "#ka"}
			{include: "#kd"}
			{include: "#ks"}
			{include: "#ke"}
			{include: "#tf"}
			{include: "#illum"}
			{include: "#d"}
			{include: "#tr"}
			{include: "#ns"}
			{include: "#sharpness"}
			{include: "#ni"}
		]
		
	
	# Ambient reflectivity
	ka:
		patterns: [{
			
			# Ka spectral [file.rfl factor]: Spectral curve
			name: "meta.ambient-reflectivity.spectral-curve.wavefront.mtl"
			match: "^\\s*(Ka)\\s+(spectral)\\s+(?!#)(\\S+)(?<!#)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "string.filename.wavefront.mtl"
				4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
		}, {
			
			# Ka xyz [x y z]: CIEXYZ values
			name: "meta.ambient-reflectivity.ciexyz.wavefront.mtl"
			match: "^\\s*(Ka)\\s+(xyz)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				4: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}, {
			
			# Ka [r g b]: RGB values
			name: "meta.ambient-reflectivity.rgb.wavefront.mtl"
			match: "^\\s*(Ka)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				3: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}]


	# Diffuse reflectivity
	kd:
		patterns: [{
			
			# Kd spectral [file.rfl factor]: Spectral curve
			name: "meta.diffuse-reflectivity.spectral-curve.wavefront.mtl"
			match: "^\\s*(Kd)\\s+(spectral)\\s+(?!#)(\\S+)(?<!#)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "string.filename.wavefront.mtl"
				4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# Kd xyz [x y z]: CIEXYZ values
			name: "meta.diffuse-reflectivity.ciexyz.wavefront.mtl"
			match: "^\\s*(Kd)\\s+(xyz)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				4: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		},{
			
			# Kd [r g b]: RGB values
			name: "meta.diffuse-reflectivity.rgb.wavefront.mtl"
			match: "^\\s*(Kd)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				3: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}]


	# Specular reflectivity
	ks:
		patterns: [{
			
			# Ks spectral [file.rfl factor]: Spectral curve
			name: "meta.specular-reflectivity.spectral-curve.wavefront.mtl"
			match: "^\\s*(Ks)\\s+(spectral)\\s+(?!#)(\\S+)(?<!#)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "string.filename.wavefront.mtl"
				4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# Ks xyz [x y z]: CIEXYZ values
			name: "meta.specular-reflectivity.ciexyz.wavefront.mtl"
			match: "^\\s*(Ks)\\s+(xyz)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				4: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		},{
			
			# Ks [r g b]: RGB values
			name: "meta.diffuse-reflectivity.rgb.wavefront.mtl"
			match: "^\\s*(Ks)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				3: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}]

	
	# Emissive colour
	ke:
		patterns: [{
			
			# Ke spectral [file.rfl factor]: Spectral curve
			name: "meta.emissive-colour.spectral-curve.wavefront.mtl"
			match: "^\\s*(Ke)\\s+(spectral)\\s+(?!#)(\\S+)(?<!#)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "string.filename.wavefront.mtl"
				4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# Ke xyz [x y z]: CIEXYZ values
			name: "meta.emissive-colour.ciexyz.wavefront.mtl"
			match: "^\\s*(Ke)\\s+(xyz)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				4: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		},{
			
			# Ke [r g b]: RGB values
			name: "meta.emissive-colour.rgb.wavefront.mtl"
			match: "^\\s*(Ke)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				3: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}]


	# Transmission filter
	tf:
		patterns: [{
			
			# Tf spectral [file.rfl factor]: Spectral curve
			name: "meta.transmission-filter.spectral-curve.wavefront.mtl"
			match: "^\\s*(Tf)\\s+(spectral)\\s+(?!#)(\\S+)(?<!#)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "string.filename.wavefront.mtl"
				4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
		},{

			# Tf xyz [x y z]: CIEXYZ values
			name: "meta.transmission-filter.ciexyz.wavefront.mtl"
			match: "^\\s*(Tf)\\s+(xyz)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "storage.modifier.$2.wavefront.mtl"
				3: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				4: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		},{
			
			# Tf [r g b]: RGB values
			name: "meta.transmission-filter.rgb.wavefront.mtl"
			match: "^\\s*(Tf)\\s+([-\\d.]+)(?:\\s+([-\\d.]+)\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "entity.value.red.wavefront.mtl",   patterns: [include: "#number"]
				3: name: "entity.value.green.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.blue.wavefront.mtl",  patterns: [include: "#number"]
		}]


	# Illumination model
	illum:
		name: "meta.illumination-model.wavefront.mtl"
		match: "^\\s*(illum)\\s+(\\d+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "constant.numeric.integer.wavefront.mtl"


	# Dissolve
	d:
		name: "meta.dissolve.wavefront.mtl"
		match: "^\\s*(d)(?:\\s+((-)halo))?\\s+([-\\d.]+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "storage.modifier.halo.wavefront.mtl"
			3: name: "punctuation.definition.dash.wavefront.mtl"
			4: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]
	
	
	# Transparency
	tr:
		name: "meta.transparency.wavefront.mtl"
		match: "^\\s*(Tr)\\s+([-\\d.]+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "entity.value.factor.wavefront.mtl", patterns: [include: "#number"]


	# Specular exponent
	ns:
		name: "meta.specular-exponent.wavefront.mtl"
		match: "^\\s*(Ns)\\s+([-\\d.]+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "entity.value.exponent.wavefront.mtl", patterns: [include: "#number"]
	

	# Sharpness
	sharpness:
		name: "meta.sharpness.wavefront.mtl"
		match: "^\\s*(sharpness)\\s+([-\\d.]+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "entity.value.wavefront.mtl", patterns: [include: "#number"]
	
	
	# Optical density (Index of refraction)
	ni:
		name: "meta.optical-density.ior.wavefront.mtl"
		match: "^\\s*(Ni)\\s+([-\\d.]+)"
		captures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "entity.value.wavefront.mtl", patterns: [include: "#number"]



	# Texture map statements
	texture:
		patterns: [{
			
			# map_Ka [-options args filename]: Ambient reflectivity
			name: "meta.texture-map.ambient-reflectivity.wavefront.mtl"
			begin: "^\\s*(map_Ka)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_Kd [-options args filename]: Diffuse reflectivity
			name: "meta.texture-map.diffuse-reflectivity.wavefront.mtl"
			begin: "^\\s*(map_Kd)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_Ks [-options args filename]: Specular reflectivity
			name: "meta.texture-map.specular-reflectivity.wavefront.mtl"
			begin: "^\\s*(map_Ks)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_Ke [-options args filename]: Emissive colour
			name: "meta.texture-map.emissive-colour.wavefront.mtl"
			begin: "^\\s*(map_Ke)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_Ns [-options args filename]: Specular exponent
			name: "meta.texture-map.specular-exponent.wavefront.mtl"
			begin: "^\\s*(map_Ns)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_d [-options args filename]: Dissolve
			name: "meta.texture-map.dissolve.wavefront.mtl"
			begin: "^\\s*(map_d)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_aat [on]: Enable antialiasing
			name: "meta.texture-map.antialiasing.wavefront.mtl"
			match: "^\\s*(map_aat)(?:\\s+(on|off)(?=\\s|$|#))?"
			captures:
				1: name: "keyword.function.$1.wavefront.mtl"
				2: name: "constant.language.boolean.$2.wavefront.mtl"
		},{
			
			# decal -[options args filename]: Selectively replace material colour with texture colour
			name: "meta.texture-map.decal.wavefront.mtl"
			begin: "^\\s*(decal)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# disp [-options args filename]: Displacement map
			name: "meta.texture-map.displacement.wavefront.mtl"
			begin: "^\\s*(disp)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# bump [-options args filename]: Bump map
			name: "meta.texture-map.bump.wavefront.mtl"
			begin: "^\\s*(bump)(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		},{
			
			# map_* [-options args filename]: Non-standard/unrecognised maps
			name: "meta.texture-map.other.$2.wavefront.mtl"
			begin: "^\\s*(map_([-\\w]+))(?=\\s|$|#)"
			end:   "(?=$|#)"
			contentName: "meta.options.wavefront.mtl"
			patterns: [include: "#texture-options"]
			beginCaptures: 1: name: "keyword.function.$1.wavefront.mtl"
		}]


	# Reflection map statements
	reflection:
		name: "meta.reflection-map.type-$4.wavefront.mtl"
		begin: "^\\s*(refl)\\s+((-)type)\\s+(sphere|cube_(?:top|bottom|front|back|left|right))(?=\\s|$|#)"
		end:   "(?=$|#)"
		contentName: "meta.options.wavefront.mtl"
		patterns: [include: "#texture-options"]
		beginCaptures:
			1: name: "keyword.function.$1.wavefront.mtl"
			2: name: "keyword.option.type.wavefront.mtl"
			3: name: "punctuation.definition.dash.wavefront.mtl"
			4: name: "constant.language.mapping-type.$4.wavefront.mtl"
	

	# Options for texture map statements
	"texture-options":
		patterns: [{
			
			# blendu: Set texture blending in horizontal direction ("U" axis)
			name: "meta.texture-option.horizontal-blending.wavefront.mtl"
			match: "(?<=\\s|^)((-)blendu)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.option.blendu.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "constant.language.boolean.$3.wavefront.mtl"
		},{
			
			# blendv: Set texture blending in vertical direction ("V" axis)
			name: "meta.texture-option.vertical-blending.wavefront.mtl"
			match: "(?<=\\s|^)((-)blendv)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.option.blendv.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "constant.language.boolean.$3.wavefront.mtl"
		},{
		
			# bm: Bump multiplier
			name: "meta.texture-option.bump-multiplier.wavefront.mtl"
			match: "(?<=\\s|^)((-)bm)\\s+([-\\d.]+)"
			captures:
				1: name: "keyword.option.bm.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# boost: Increase sharpness/clarity of mip-mapped textures
			name: "meta.texture-option.boost.wavefront.mtl"
			match: "(?<=\\s|^)((-)boost)\\s+([-\\d.]+)"
			captures:
				1: name: "keyword.option.boost.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# cc: Colour correction
			name: "meta.texture-option.colour-correction.wavefront.mtl"
			match: "(?<=\\s|^)((-)cc)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.option.cc.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "constant.language.boolean.$3.wavefront.mtl"
		},{
			
			# clamp: Clamping
			name: "meta.texture-option.clamping.wavefront.mtl"
			match: "(?<=\\s|^)((-)clamp)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.option.clamp.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "constant.language.boolean.$3.wavefront.mtl"
		},{
			
			# imfchan: Image channel for scalar/bump textures
			name: "meta.texture-option.channel.wavefront.mtl"
			match: "(?<=\\s|^)((-)imfchan)(?:\\s+([rgbmlz])(?=\\s|$|#))?"
			captures:
				1: name: "keyword.option.imfchan.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "constant.language.boolean.$3.wavefront.mtl"
		},{
			
			# mm: Modify value ranges
			name: "meta.texture-option.modify-range.wavefront.mtl"
			match: "(?<=\\s|^)((-)mm)\\s+([-\\d.]+)(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.option.mm.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.base.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.gain.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# o: Offset
			name: "meta.texture-option.offset.wavefront.mtl"
			match: "(?<=\\s|^)((-)o)\\s+([-\\d.]+)(?:\\s+([-\\d.]+))?(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.option.o.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.u-offset.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.v-offset.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.w-offset.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# s: Scale
			name: "meta.texture-option.scale.wavefront.mtl"
			match: "(?<=\\s|^)((-)s)\\s+([-\\d.]+)(?:\\s+([-\\d.]+))?(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.option.s.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.u-scale.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.v-scale.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.w-scale.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# t: Turbulence
			name: "meta.texture-option.turbulence.wavefront.mtl"
			match: "(?<=\\s|^)((-)t)\\s+([-\\d.]+)(?:\\s+([-\\d.]+))?(?:\\s+([-\\d.]+))?"
			captures:
				1: name: "keyword.option.t.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.u-value.wavefront.mtl", patterns: [include: "#number"]
				4: name: "entity.value.v-value.wavefront.mtl", patterns: [include: "#number"]
				5: name: "entity.value.w-value.wavefront.mtl", patterns: [include: "#number"]
		},{
			
			# texres: Texture resolution
			name: "meta.texture-option.resolution.wavefront.mtl"
			match: "(?<=\\s|^)((-)texres)\\s+([-\\d.]+)"
			captures:
				1: name: "keyword.option.texres.wavefront.mtl"
				2: name: "punctuation.definition.dash.wavefront.mtl"
				3: name: "entity.value.wavefront.mtl", patterns: [include: "#number"]
		},{
		
			# Anything else is assumed to be a filename
			name: "string.filename.wavefront.mtl"
			match: "(?!#)\\S+(?<!#)"
		}]
