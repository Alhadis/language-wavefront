name: "Wavefront Object"
scopeName: "source.wavefront.obj"
fileTypes: ["obj"]
patterns: [{ include: "#main" }]


repository:
	
	# Top-level patterns
	main:
		patterns: [
			{include: "#comment"}
			{include: "#line-continuation"}
			{include: "#general"}
			{include: "#vertex"}
			{include: "#elements"}
			{include: "#attributes"}
			{include: "#freeform"}
			{include: "#body-statements"}
			{include: "#connect"}
			{include: "#grouping"}
			{include: "#display"}
			{include: "#number"}
		]
	
	# Generic patterns that should be picked up anywhere
	global:
		patterns: [
			{include: "#comment"}
			{include: "#number"}
			{include: "#line-continuation"}
		]
	
	
	# Comment-lines
	comment:
		name: "comment.line.number-sign.wavefront.obj"
		begin: "#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.wavefront.obj"

	
	# Continuous newline
	"line-continuation":
		name: "constant.character.escape.newline.wavefront.obj"
		match: "\\\\\n"
	
	
	# Numeric values
	number:
		patterns: [{
			
			# Integer
			name: "constant.numeric.integer.wavefront.obj"
			match: "(?<=[\\s,]|^)-?\\d+(?![-\\d.])"
			
		},{
			# Floating-point
			name: "constant.numeric.float.wavefront.obj"
			match: "(?<=[\\s,]|^)-?(\\d+)(?:(\\.)(\\d+))?\\b"
			captures:
				1: name: "leading.decimal"
				2: name: "decimal.separator"
				3: name: "trailing.decimal"
		}]
	
	
	# Mixed arguments used by General Statements
	args:
		name: "meta.arguments.wavefront.obj"
		begin: "\\G"
		end: "(?<!\\\\)$"
		patterns: [
			{include: "#global"}
			{name: "variable.language.substituted.wavefront.obj", match: "\\$[1-9]+"}
		]
		
	
	
	# XYZ[W] vector
	xyzw:
		name: "meta.vector.xyzw.wavefront.obj"
		match: "\\G\\s*(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)(?:\\s+(?!#)(\\S+)(?<!#))?"
		captures:
			1: name: "entity.x.coordinate.wavefront.obj",  patterns: [include: "#number"]
			2: name: "entity.y.coordinate.wavefront.obj",  patterns: [include: "#number"]
			3: name: "entity.z.coordinate.wavefront.obj",  patterns: [include: "#number"]
			4: name: "entity.w.weight.wavefront.obj",      patterns: [include: "#number"]
	
	# UVW vector
	uvw:
		name: "meta.vector.uvw.wavefront.obj"
		match: "\\G\\s*(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)"
		captures:
			1: name: "entity.u.coordinate.wavefront.obj",  patterns: [include: "#number"]
			2: name: "entity.v.coordinate.wavefront.obj",  patterns: [include: "#number"]
			3: name: "entity.w.coordinate.wavefront.obj",  patterns: [include: "#number"]
	
	# Normals vector
	ijk:
		name: "meta.vector.ijk.wavefront.obj"
		match: "\\G\\s*(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)\\s+(?!#)(\\S+)(?<!#)"
		captures:
			1: name: "entity.i.coordinate.wavefront.obj",  patterns: [include: "#number"]
			2: name: "entity.j.coordinate.wavefront.obj",  patterns: [include: "#number"]
			3: name: "entity.k.coordinate.wavefront.obj",  patterns: [include: "#number"]
	
	
	# Vertex references
	vertref:
		patterns: [
			{include: "#vertref-triple"}
			{include: "#vertref-double"}
			{include: "#vertref-single"}
		]
	
	# Single reference only
	"vertref-single":
		patterns: [
			{match: "-\\d+", name: "constant.numeric.vertex-reference.relative.wavefront.obj"}
			{match:  "\\d+", name: "constant.numeric.vertex-reference.absolute.wavefront.obj"}
		]
	
	# Vertex reference with an optional double reference: v1/v1, v2/v2, v3/v3
	"vertref-double":
		name: "meta.vertex-reference.double.wavefront.obj"
		match: "(?<=\\s)(-?\\d+)(\\/)(-?\\d+)(?=\\s|$)"
		captures:
			1: name: "meta.first.wavefront.obj",   patterns: [include: "#vertref"]
			2: name: "punctuation.separator.slash.wavefront.obj"
			3: name: "meta.second.wavefront.obj",  patterns: [include: "#vertref"]
	
	# Vertex reference with two optional double references (v1/v1/v1, v1//v1)
	"vertref-triple":
		name: "meta.vertex-reference.triple.wavefront.obj"
		match: "(?<=\\s)(-?\\d+)(\\/)(-?\\d+)?(\\/)(-?\\d+)(?=\\s|$)"
		captures:
			1: name: "meta.first.wavefront.obj",   patterns: [include: "#vertref"]
			2: name: "punctuation.separator.slash.wavefront.obj"
			3: name: "meta.second.wavefront.obj",  patterns: [include: "#vertref"]
			4: name: "punctuation.separator.slash.wavefront.obj"
			5: name: "meta.third.wavefront.obj",   patterns: [include: "#vertref"]
	
	
	# 2D-curve reference
	curveref:
		name: "meta.curve-reference.wavefront.obj"
		match: "([-\\d.]+)\\s+([-\\d.]+)\\s+(\\d+)"
		captures:
			1: name: "constant.numeric.start-value.wavefront.obj",  patterns: [include: "#number"]
			2: name: "constant.numeric.end-value.wavefront.obj",    patterns: [include: "#number"]
			3: name: "constant.numeric.curve-index.wavefront.obj",  patterns: [include: "#number"]
	
	
	# General statements
	general:
		patterns: [{
			
			# call: Inject the contents of another .obj/.mod at this line
			name: "meta.function-call.$1.wavefront.obj"
			begin: "^\\s*(call)(?:\\s+(?!#)(\\S+)?)?"
			end: "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "string.filename.wavefront.obj"
			patterns: [include: "#args"]
		},{
			
			# csh: Execute a shell command (Ignore errors)
			name: "meta.function-call.$1.ignore-errors.wavefront.obj"
			begin: "^\\s*(csh)(?:\\s+(-)(\\w*))"
			end: "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "punctuation.definition.dash.wavefront.obj"
				3: name: "string.command-name.wavefront.obj"
			patterns: [include: "#args"]
		},{
			
			# csh: Execute a shell command
			name: "meta.function-call.$1.wavefront.obj"
			begin: "^\\s*(csh)(?:\\s+(\\w+))?"
			end: "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "string.command-name.wavefront.obj"
			patterns: [include: "#args"]
		}]
	
	
	
	# Vertex data
	vertex:
		patterns: [{
			
			# v: Geometric vertex
			name: "meta.vertex.geometric.wavefront.obj"
			begin: "^\\s*(v)(?=\\s|$|#)"
			end:   "(?=$|#)"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#xyzw"}
				{include: "#global"}
			]
		},{
			
			# vp: Parameter space vertex
			name: "meta.vertex.parameter-space.wavefront.obj"
			begin: "^\\s*(vp)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#uvw"}
				{include: "#global"}
			]
		},{
			
			# vn: Vertex normal
			name: "meta.vertex.normal.wavefront.obj"
			begin: "^\\s*(vn)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#ijk"}
				{include: "#global"}
			]
		},{
			
			# vt: Texture vertex
			name: "meta.vertex.texture.wavefront.obj"
			begin: "^\\s*(vt)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#uvw"}
				{include: "#global"}
			]
		}]

	
	# Free-form attribute statements
	attributes:
		patterns: [{
			
			# cstype: Describe the type of a curve or surface
			name: "meta.free-form.attribute.type.wavefront.obj"
			match: "^\\s*(cstype)(?:\\s+(rat(?=\\s|$))?\\s*(?:(bmatrix|bezier|bspline|cardinal|taylor))?)?(?=\\s|$)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.rational-form.wavefront.obj"
				3: name: "entity.value.wavefront.obj"
		},{
			
			# deg: Set the polynomial degree for curves/surfaces
			name: "meta.free-form.attribute.polynomial-degree.wavefront.obj"
			match: "^\\s*(deg)(?:\\s+(\\d+)(?=\\s|$))?(?:\\s+(\\d+))?(?=\\s|$)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.numeric.u-degree.wavefront.obj"
				3: name: "constant.numeric.v-degree.wavefront.obj"
		},{
			
			# bmat: Set the basis matrices used for basis matrix curves/surfaces
			name: "meta.free-form.attribute.$2.basis-matrix.wavefront.obj"
			begin: "^\\s*(bmat)(?:\\s+(u|v)(?=\\s|$)\\s*)?"
			end:   "(?<!\\\\)$|(?=#)"
			contentName: "meta.matrix.wavefront.obj"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.type.wavefront.obj"
			patterns: [include: "#global"]
		},{
			
			# step: Specify step-size for curves/surfaces that use a basis matrix
			name: "meta.free-form.attribute.step-size.wavefront.obj"
			match: "^\\s*(step)(?:\\s+(\\d+))?(?:\\s+(\\d+))?(?=\\s|$)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.numeric.u-size.wavefront.obj"
				3: name: "constant.numeric.v-size.wavefront.obj"
		}]


	# Elements
	elements:
		patterns: [{
			
			# p: Point
			name: "meta.polygonal.element.point.wavefront.obj"
			begin: "^\\s*(p)(?:\\s|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#vertref-single"}
				{include: "#global"}
			]
		},{
			
			# l: Line
			name: "meta.polygonal.element.line.wavefront.obj"
			begin: "^\\s*(l)(?:\\s|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#vertref-double"}
				{include: "#vertref-single"}
				{include: "#global"}
			]
		},{
			
			# f: Face
			name: "meta.polygonal.element.face.wavefront.obj"
			begin: "^\\s*(?:(f)|(fo))(?:\\s|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "invalid.deprecated.wavefront.obj"
			patterns: [
				{include: "#vertref"}
				{include: "#global"}
			]
		},{
			
			# curv: Simple curve
			name: "meta.free-form.element.curve.wavefront.obj"
			begin: "^\\s*(curv)\\s+([-\\d.]+)\\s+([-\\d.]+)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.value.start-value.wavefront.obj", patterns: [include: "#number"]
				3: name: "entity.value.end-value.wavefront.obj",   patterns: [include: "#number"]
			patterns: [
				{include: "#vertref-single"}
				{include: "#global"}
			]
		},{
			
			# curv2: 2D-curve
			name: "meta.free-form.element.curve-2d.wavefront.obj"
			begin: "^\\s*(curv2)(?:\\s|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#vertref-single"}
				{include: "#global"}
			]
		},{
			
			# surf: Surface
			name: "meta.free-form.element.surface.wavefront.obj"
			begin: "^\\s*(surf)\\s+([-\\d.]+)\\s+([-\\d.]+)\\s+([-\\d.]+)\\s+([-\\d.]+)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.value.u-start.wavefront.obj",  patterns: [include: "#number"]
				3: name: "entity.value.u-end.wavefront.obj",    patterns: [include: "#number"]
				4: name: "entity.value.v-start.wavefront.obj",  patterns: [include: "#number"]
				5: name: "entity.value.v-end.wavefront.obj",    patterns: [include: "#number"]
			patterns: [
				{include: "#vertref"}
				{include: "#global"}
			]
		}]


	# Free-form body statements
	"body-statements":
		patterns: [{
			
			# parm: Specify global parameter values
			name: "meta.body-statement.parameter.$2-direction.wavefront.obj"
			begin: "^\\s*(parm)\\s+(u|v)(?=\\s|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.direction.wavefront.obj"
			patterns: [include: "#global"]
		},{
			
			# trim: Specify a sequence of curves to build a single outer trimming loop
			name: "meta.body-statement.trimming-loop.wavefront.obj"
			begin: "^\\s*(trim)(?:\\s+|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#curveref"}
				{include: "#global"}
			]
		},{
			
			# scrv: Special curve
			name: "meta.body-statement.special-curve.wavefront.obj"
			begin: "^\\s*(scrv)(?:\\s+|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#curveref"}
				{include: "#global"}
			]
		},{
			
			# sp: Special point
			name: "meta.body-statement.special-point.wavefront.obj"
			begin: "^\\s*(sp)(?:\\s+|$|#)"
			end: "(?<!\\\\)$"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [
				{include: "#vertref-single"}
				{include: "#global"}
			]
		},{
			
			# end: End the currently-open curve or surface body
			name: "keyword.control.body-statement.end.wavefront.obj"
			match: "^\\s*end(?=\\s|$|#)"
		}]


	# Connectivity statement
	connect:
		name: "meta.free-form.connectivity.wavefront.obj"
		match: """(?x)
			^\\s*
			
			(con)           # 1: keyword.function.$1.wavefront.obj
			
			\\s+(\\d+)      # 2: entity.value.first-surface.index.wavefront.obj
			\\s+([-\\d.]+)  # 3: entity.value.first-surface.start.wavefront.obj
			\\s+([-\\d.]+)  # 4: entity.value.first-surface.end.wavefront.obj
			\\s+(\\d+)      # 5: entity.value.first-surface.curve.wavefront.obj
			
			\\s+(\\d+)      # 6: entity.value.second-surface.index.wavefront.obj
			\\s+([-\\d.]+)  # 7: entity.value.second-surface.start.wavefront.obj
			\\s+([-\\d.]+)  # 8: entity.value.second-surface.end.wavefront.obj
			\\s+(\\d+)      # 9: entity.value.second-surface.curve.wavefront.obj
		"""
		captures:
			1: name: "keyword.function.$1.wavefront.obj"
			2: name: "entity.value.first-surface.index.wavefront.obj",  patterns: [include: "#number"]
			3: name: "entity.value.first-surface.start.wavefront.obj",  patterns: [include: "#number"]
			4: name: "entity.value.first-surface.end.wavefront.obj",    patterns: [include: "#number"]
			5: name: "entity.value.first-surface.curve.wavefront.obj",  patterns: [include: "#number"]
			6: name: "entity.value.first-surface.index.wavefront.obj",  patterns: [include: "#number"]
			7: name: "entity.value.first-surface.start.wavefront.obj",  patterns: [include: "#number"]
			8: name: "entity.value.first-surface.end.wavefront.obj",    patterns: [include: "#number"]
			9: name: "entity.value.first-surface.curve.wavefront.obj",  patterns: [include: "#number"]



	# Grouping statements
	grouping:
		patterns: [{
			
			# g: Group
			name: "meta.grouping-statement.group.wavefront.obj"
			begin: "^\\s*(g)(?:\\s|$|#)"
			end:   "(?<!\\\\)$|(?=#)"
			contentName: "meta.group-names.wavefront.obj"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [{
				
				# Individual group name(s)
				name: "variable.parameter.group-name.wavefront.obj"
				match: "(?!#)\\S+(?<!#)"
			
			}, include: "#global"]
		},{
			
			# s: Smoothing group
			name: "meta.grouping-statement.smoothing-group.wavefront.obj"
			match: "^\\s*(s)\\s+(?:(\\d+)|(off))(?=\\s|$|#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.numeric.wavefront.obj"
				3: name: "constant.language.off.wavefront.obj"
		},{
			
			# mg: Merging group/resolution
			name: "meta.free-form.grouping-statement.merge-group.wavefront.obj"
			match: "^\\s*(mg)\\s+(?:(off)(?=\\s|$|#)|(\\d+)\\s+([-\\d.]+))"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.off.wavefront.obj"
				3: name: "entity.group-number.wavefront.obj", patterns: [include: "#number"]
				4: name: "entity.max-distance.wavefront.obj", patterns: [include: "#number"]
		},{
			
			# o: User-defined object statement
			name: "meta.grouping-statement.user-defined.wavefront.obj"
			match: "^\\s*(o)\\s+(?!#)(\\S+)(?<!#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "variable.parameter.object-name.wavefront.obj"
		}]


	# Display/render attributes
	display:
		patterns: [{
			
			# bevel: Bevel interpolation
			name: "meta.display.polygonal.attribute.bevel.wavefront.obj"
			match: "^\\s*(bevel)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.$2.wavefront.obj"
		},{
			
			# c_interp: Colour interpolation
			name: "meta.display.polygonal.attribute.colour-interpolation.wavefront.obj"
			match: "^\\s*(c_interp)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.$2.wavefront.obj"
		},{
			
			# d_interp: Dissolve interpolation
			name: "meta.display.polygonal.attribute.dissolve-interpolation.wavefront.obj"
			match: "^\\s*(d_interp)\\s+(on|off)(?=\\s|$|#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.$2.wavefront.obj"
		},{
			
			# lod: Level of detail
			name: "meta.display.attribute.level-of-detail.wavefront.obj"
			match: "^\\s*(lod)\\s+([-\\d.]+)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "entity.value.wavefront.obj", patterns: [include: "#number"]
		},{
		
			# maplib: Map library
			name: "meta.display.attribute.map-library.wavefront.obj"
			begin: "^\\s*(maplib)(?=\\s|$|#)"
			end: "(?<!\\\\)$|(?=#)"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [{
				
				# Filenames
				name: "string.filename.wavefront.obj"
				match: "(?!#)\\S+(?<!#)"
			
			}, include: "#global"]
		},{
			
			# usemap: Specify texture map name
			name: "meta.display.attribute.use-map.wavefront.obj"
			match: "^\\s*(usemap)\\s+(?:(off)|(?!#)(\\S+)(?<!#))"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.off.wavefront.obj"
				3: name: "variable.parameter.map-name.wavefront.obj"
		},{
		
			# usemtl: Specify material name
			name: "meta.display.attribute.use-material.wavefront.obj"
			match: "^\\s*(usemtl)\\s+(?!#)(\\S+)(?<!#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "variable.parameter.material-name.wavefront.obj"
		},{
			
			# mtllib: Material library
			name: "meta.display.attribute.material-library.wavefront.obj"
			begin: "^\\s*(mtllib)(?=\\s|$|#)"
			end: "(?<!\\\\)$|(?=#)"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
			patterns: [{
				
				# Filenames
				name: "string.filename.wavefront.obj"
				match: "(?!#)\\S+(?<!#)"
				
			}, include: "#global"]
		},{
			
			# shadow_obj: Shadow object
			name: "meta.display.attribute.shadow-object.wavefront.obj"
			match: "^\\s*(shadow_obj)\\s+(?!#)(\\S+)(?<!#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "string.filename.wavefront.obj"
		},{
			
			# trace_obj: Raytracing object
			name: "meta.display.attribute.trace-object.wavefront.obj"
			match: "^\\s*(trace_obj)\\s+(?!#)(\\S+)(?<!#)"
			captures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "string.filename.wavefront.obj"
		},{
			
			# ctech: Curve approximation technique
			name: "meta.display.free-form.attribute.curve-technique.wavefront.obj"
			begin: "^\\s*(ctech)\\s+(cparm|cspace|curv)(?=\\s|$|#)"
			end: "(?<!\\\\)$|(?=#)"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.$2.wavefront.obj"
			patterns: [{
				
				# cparm: Constant parametric subdivision
				match: "\\G(?<=cparm)\\s+([-\\d.]+)"
				name: "entity.value.resolution.wavefront.obj"
				captures: 1: patterns: [include: "#number"]
				
			},{
			
				# cspace: Constant spatial subdivision
				match: "\\G(?<=cspace)\\s+([-\\d.]+)"
				name: "entity.value.max-length.wavefront.obj"
				captures: 1: patterns: [include: "#number"]
				
			},{
			
				# curv: Curvature-dependent subdivision
				match: "\\G(?<=curv)\\s+([-\\d.]+)\\s+([-\\d.]+)"
				captures:
					1: name: "entity.value.max-distance.wavefront.obj",  patterns: [include: "#number"]
					2: name: "entity.value.max-angle.wavefront.obj",     patterns: [include: "#number"]
				
			}, include: "#global"]
		},{
			
			# stech: Surface approximation technique
			name: "meta.display.free-form.attribute.surface-technique.wavefront.obj"
			begin: "^\\s*(stech)\\s+(cparma|cparmb|cspace|curv)(?=\\s|$|#)"
			end: "(?<!\\\\)$|(?=#)"
			beginCaptures:
				1: name: "keyword.function.$1.wavefront.obj"
				2: name: "constant.language.$2.wavefront.obj"
			patterns: [{
				
				# cparma: Constant parametric subdivision (separate parameters)
				match: "\\G(?<=cparma)\\s+([-\\d.]+)\\s+([-\\d.]+)"
				captures:
					1: name: "entity.value.u-resolution.wavefront.obj",  patterns: [include: "#number"]
					2: name: "entity.value.v-resolution.wavefront.obj",  patterns: [include: "#number"]
			},{
				
				# cparmb: Constant parametric subdivision (uniform/one parameter)
				match: "\\G(?<=cparmb)\\s+([-\\d.]+)"
				name: "entity.value.uv-resolution.wavefront.obj"
				captures: 1: patterns: [include: "#number"]
			
			},{
				
				# cspace: Constant spatial subdivision
				match: "\\G(?<=cspace)\\s+([-\\d.]+)"
				name: "entity.value.max-length.wavefront.obj"
				captures: 1: patterns: [include: "#number"]
				
			}, {
				
				# curv: Curvature-dependent subdivision
				match: "\\G(?<=curv)\\s+([-\\d.]+)\\s+([-\\d.]+)"
				captures:
					1: name: "entity.value.max-distance.wavefront.obj",  patterns: [include: "#number"]
					2: name: "entity.value.max-angle.wavefront.obj",     patterns: [include: "#number"]
				
			}, include: "#global"]
		}]
